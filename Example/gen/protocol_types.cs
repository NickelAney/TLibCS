/**
 * Autogenerated by TData Compiler (0.0.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

using System;
using TLibCS.Protocol;

namespace TLibCS.Creation
{

	public partial class login_req
	{
		private string _name;
		public string name
		{
			get { return _name; }
			set { _name = value; }
		}

		private string _password;
		public string password
		{
			get { return _password; }
			set { _password = value; }
		}

		private byte _age;
		public byte age
		{
			get { return _age; }
			set { _age = value; }
		}

		public void Read(TReader reader)
		{

			reader.ReadStructBegin("login_req");
			{
				if(reader.ReadFieldBegin("name"))
				{
					reader.Read(out this._name);
				}
				reader.ReadFieldEnd("name");
			}

			{
				if(reader.ReadFieldBegin("password"))
				{
					reader.Read(out this._password);
				}
				reader.ReadFieldEnd("password");
			}

			{
				if(reader.ReadFieldBegin("age"))
				{
					reader.Read(out this._age);
				}
				reader.ReadFieldEnd("age");
			}


			reader.ReadStructEnd("login_req");
		}

		public void Write(TWriter writer)
		{
		
			writer.WriteStructBegin("login_req");
			{
				if(writer.WriteFieldBegin("name"))
				{
					writer.Write(this._name);
				}
				writer.WriteFieldEnd("name");
			}

			{
				if(writer.WriteFieldBegin("password"))
				{
					writer.Write(this._password);
				}
				writer.WriteFieldEnd("password");
			}

			{
				if(writer.WriteFieldBegin("age"))
				{
					writer.Write(this._age);
				}
				writer.WriteFieldEnd("age");
			}


			writer.WriteStructEnd("login_req");
		}
	}

	public partial class login_rsp
	{
		private int _result; //0表示成功， 非0表示失败
		public int result
		{
			get { return _result; }
			set { _result = value; }
		}

		private ulong _session_id; //可以使用条件判断与据来规定何时出现这个元素， 合法的运算符有==, !=, &这三种。
		public ulong session_id
		{
			get { return _session_id; }
			set { _session_id = value; }
		}

		public void Read(TReader reader)
		{

			reader.ReadStructBegin("login_rsp");
			{
				if(reader.ReadFieldBegin("result"))
				{
					reader.Read(out this._result);
				}
				reader.ReadFieldEnd("result");
			}

			if(this.result == 0)
			{
				if(reader.ReadFieldBegin("session_id"))
				{
					reader.Read(out this._session_id);
				}
				reader.ReadFieldEnd("session_id");
			}


			reader.ReadStructEnd("login_rsp");
		}

		public void Write(TWriter writer)
		{
		
			writer.WriteStructBegin("login_rsp");
			{
				if(writer.WriteFieldBegin("result"))
				{
					writer.Write(this._result);
				}
				writer.WriteFieldEnd("result");
			}

			if(this.result == 0)
			{
				if(writer.WriteFieldBegin("session_id"))
				{
					writer.Write(this._session_id);
				}
				writer.WriteFieldEnd("session_id");
			}


			writer.WriteStructEnd("login_rsp");
		}
	}

	public partial class message_body
	{
		private login_req _login_req;
		public login_req login_req
		{
			get { return _login_req; }
			set { _login_req = value; }
		}

		private login_rsp _login_rsp;
		public login_rsp login_rsp
		{
			get { return _login_rsp; }
			set { _login_rsp = value; }
		}

		public void Read(TReader reader, message_id selector)
		{
			reader.ReadUnionBegin("message_body");
			switch(selector)
			{
			case message_id.E_MID_LOGIN_REQ:
				if(reader.ReadFieldBegin("login_req"))
				{
					this._login_req = new login_req();
					this._login_req.Read(reader);
				}
				reader.ReadFieldEnd("login_req");
				break;
			case message_id.E_MID_LOGIN_RSP:
				if(reader.ReadFieldBegin("login_rsp"))
				{
					this._login_rsp = new login_rsp();
					this._login_rsp.Read(reader);
				}
				reader.ReadFieldEnd("login_rsp");
				break;
			default:
				break;
			}
			reader.ReadUnionEnd("message_body");
		}

		public void Write(TWriter writer, message_id selector)
		{
			writer.WriteUnionBegin("message_body");
			switch(selector)
			{
			case message_id.E_MID_LOGIN_REQ:
				if(writer.WriteFieldBegin("login_req"))
				{
					this._login_req.Write(writer);
				}
				writer.WriteFieldEnd("login_req");
				break;
			case message_id.E_MID_LOGIN_RSP:
				if(writer.WriteFieldBegin("login_rsp"))
				{
					this._login_rsp.Write(writer);
				}
				writer.WriteFieldEnd("login_rsp");
				break;
			default:
				break;
			}
			writer.WriteUnionEnd("message_body");
		}
	}

//定义网络协议
	public partial class message
	{
		private message_id _mid;
		public message_id mid
		{
			get { return _mid; }
			set { _mid = value; }
		}

		private message_body _body;
		public message_body body
		{
			get { return _body; }
			set { _body = value; }
		}

		public void Read(TReader reader)
		{

			reader.ReadStructBegin("message");
			{
				if(reader.ReadFieldBegin("mid"))
				{
						int e;
						reader.Read(out e);
						this._mid = (message_id)e;
				}
				else
				{
					string es;
					reader.Read(out es);
					this._mid = (message_id)Enum.Parse(typeof(message_id), es);
				}
				reader.ReadFieldEnd("mid");
			}

			{
				if(reader.ReadFieldBegin("body"))
				{
					this._body.Read(reader, this.mid				);
				}
				reader.ReadFieldEnd("body");
			}


			reader.ReadStructEnd("message");
		}

		public void Write(TWriter writer)
		{
		
			writer.WriteStructBegin("message");
			{
				if(writer.WriteFieldBegin("mid"))
				{
					writer.Write((int)this._mid);
				}
				else
				{
					writer.Write(this._mid.ToString());
				}
				writer.WriteFieldEnd("mid");
			}

			{
				if(writer.WriteFieldBegin("body"))
				{
					this._body.Write(writer, this.mid				);
				}
				writer.WriteFieldEnd("body");
			}


			writer.WriteStructEnd("message");
		}
	}


	public enum tconnd_instance_level
	{
		e_low = 0,
		e_high = 1,
	};

	public static partial class Constants
	{
		public const uint TONND_CONFIG_NUM = 1024		;
	}
	public static partial class Constants
	{
		public const uint IP_LENGTH = 16		;
	}
	public partial class tconnd_instance_config
	{
		private tconnd_instance_level _level;
		public tconnd_instance_level level
		{
			get { return _level; }
			set { _level = value; }
		}

		private string _ip;
		public string ip
		{
			get { return _ip; }
			set { _ip = value; }
		}

		private ushort _port;
		public ushort port
		{
			get { return _port; }
			set { _port = value; }
		}

		private uint _backlog;
		public uint backlog
		{
			get { return _backlog; }
			set { _backlog = value; }
		}

		private uint _epoll_size;
		public uint epoll_size
		{
			get { return _epoll_size; }
			set { _epoll_size = value; }
		}

		public void Read(TReader reader)
		{

			reader.ReadStructBegin("tconnd_instance_config");
			{
				if(reader.ReadFieldBegin("level"))
				{
						int e;
						reader.Read(out e);
						this._level = (tconnd_instance_level)e;
				}
				else
				{
					string es;
					reader.Read(out es);
					this._level = (tconnd_instance_level)Enum.Parse(typeof(tconnd_instance_level), es);
				}
				reader.ReadFieldEnd("level");
			}

			{
				if(reader.ReadFieldBegin("ip"))
				{
					reader.Read(out this._ip);
				}
				reader.ReadFieldEnd("ip");
			}

			{
				if(reader.ReadFieldBegin("port"))
				{
					reader.Read(out this._port);
				}
				reader.ReadFieldEnd("port");
			}

			{
				if(reader.ReadFieldBegin("backlog"))
				{
					reader.Read(out this._backlog);
				}
				reader.ReadFieldEnd("backlog");
			}

			{
				if(reader.ReadFieldBegin("epoll_size"))
				{
					reader.Read(out this._epoll_size);
				}
				reader.ReadFieldEnd("epoll_size");
			}


			reader.ReadStructEnd("tconnd_instance_config");
		}

		public void Write(TWriter writer)
		{
		
			writer.WriteStructBegin("tconnd_instance_config");
			{
				if(writer.WriteFieldBegin("level"))
				{
					writer.Write((int)this._level);
				}
				else
				{
					writer.Write(this._level.ToString());
				}
				writer.WriteFieldEnd("level");
			}

			{
				if(writer.WriteFieldBegin("ip"))
				{
					writer.Write(this._ip);
				}
				writer.WriteFieldEnd("ip");
			}

			{
				if(writer.WriteFieldBegin("port"))
				{
					writer.Write(this._port);
				}
				writer.WriteFieldEnd("port");
			}

			{
				if(writer.WriteFieldBegin("backlog"))
				{
					writer.Write(this._backlog);
				}
				writer.WriteFieldEnd("backlog");
			}

			{
				if(writer.WriteFieldBegin("epoll_size"))
				{
					writer.Write(this._epoll_size);
				}
				writer.WriteFieldEnd("epoll_size");
			}


			writer.WriteStructEnd("tconnd_instance_config");
		}
	}

	public partial class tconnd_config
	{
		private string _log_config;
		public string log_config
		{
			get { return _log_config; }
			set { _log_config = value; }
		}

		private uint _instance_config_num;
		private tconnd_instance_config		[] _instance_config;
		public tconnd_instance_config		[] instance_config
		{
			get { return _instance_config; }
			set { _instance_config = value; }
		}

		public void Read(TReader reader)
		{

			reader.ReadStructBegin("tconnd_config");
			{
				if(reader.ReadFieldBegin("log_config"))
				{
					reader.Read(out this._log_config);
				}
				reader.ReadFieldEnd("log_config");
			}

			{
				reader.ReadVectorBegin();

				if (reader.ReadFieldBegin("instance_config_num"))
				{
					reader.Read(out this._instance_config_num);
					this._instance_config = new tconnd_instance_config[this._instance_config_num];
				}
				reader.ReadFieldEnd("instance_config_num");

				for(uint i = 0; i < Constants.TONND_CONFIG_NUM; ++i)
				{
					if(i == this._instance_config_num) break;

					if(reader.ReadVectorElementBegin("instance_config", i))
					{
					this._instance_config[i] = new tconnd_instance_config();
					this._instance_config[i].Read(reader				);
					}
					reader.ReadVectorElementEnd("instance_config", i);
				}
				reader.ReadVectorEnd();
			}


			reader.ReadStructEnd("tconnd_config");
		}

		public void Write(TWriter writer)
		{
		
			writer.WriteStructBegin("tconnd_config");
			{
				if(writer.WriteFieldBegin("log_config"))
				{
					writer.Write(this._log_config);
				}
				writer.WriteFieldEnd("log_config");
			}

			{
				writer.WriteVectorBegin();

				if (writer.WriteFieldBegin("instance_config_num"))
				{
					this._instance_config_num = (uint)this._instance_config.Length;
					writer.Write(this._instance_config_num);
				}
				writer.WriteFieldEnd("instance_config_num");

				for(uint i = 0; i < Constants.TONND_CONFIG_NUM; ++i)
				{
					if(i == this._instance_config_num) break;

					if(writer.WriteVectorElementBegin("instance_config", i))
					{
						this._instance_config[i].Write(writer				);
					}
					writer.WriteVectorElementEnd("instance_config", i);
				}
				writer.WriteVectorEnd();
			}


			writer.WriteStructEnd("tconnd_config");
		}
	}


	public enum item_type
	{
		crystal = 0,
		other = 1,
	};

	public static partial class Constants
	{
		public const uint ITEM_NAME_LENGTH = 1024		;
	}
	public static partial class Constants
	{
		public const uint ITEM_VEC_NUM = 10		;
	}
	public partial class item_table
	{
		private uint _ID;
		public uint ID
		{
			get { return _ID; }
			set { _ID = value; }
		}

		private string _ItemName;
		public string ItemName
		{
			get { return _ItemName; }
			set { _ItemName = value; }
		}

		private int _Metempsychosis;
		public int Metempsychosis
		{
			get { return _Metempsychosis; }
			set { _Metempsychosis = value; }
		}

		private uint _UseTime;
		public uint UseTime
		{
			get { return _UseTime; }
			set { _UseTime = value; }
		}

		private uint _Bill;
		public uint Bill
		{
			get { return _Bill; }
			set { _Bill = value; }
		}

		private ushort _ReplaceItem;
		public ushort ReplaceItem
		{
			get { return _ReplaceItem; }
			set { _ReplaceItem = value; }
		}

		private int _Medals;
		public int Medals
		{
			get { return _Medals; }
			set { _Medals = value; }
		}

		private int _Value;
		public int Value
		{
			get { return _Value; }
			set { _Value = value; }
		}

		private int _ReserveMoneyFlag;
		public int ReserveMoneyFlag
		{
			get { return _ReserveMoneyFlag; }
			set { _ReserveMoneyFlag = value; }
		}

		private byte _Quality;
		public byte Quality
		{
			get { return _Quality; }
			set { _Quality = value; }
		}

		private item_type _ItemType;
		public item_type ItemType
		{
			get { return _ItemType; }
			set { _ItemType = value; }
		}

		private uint _UseSingTime;
		public uint UseSingTime
		{
			get { return _UseSingTime; }
			set { _UseSingTime = value; }
		}

		private uint _UserTarget;
		public uint UserTarget
		{
			get { return _UserTarget; }
			set { _UserTarget = value; }
		}

		private uint _CanMoved;
		public uint CanMoved
		{
			get { return _CanMoved; }
			set { _CanMoved = value; }
		}

		private uint _CanDeleted;
		public uint CanDeleted
		{
			get { return _CanDeleted; }
			set { _CanDeleted = value; }
		}

		private uint _CanTrade;
		public uint CanTrade
		{
			get { return _CanTrade; }
			set { _CanTrade = value; }
		}

		private uint _CanSold;
		public uint CanSold
		{
			get { return _CanSold; }
			set { _CanSold = value; }
		}

		private uint _CanStored;
		public uint CanStored
		{
			get { return _CanStored; }
			set { _CanStored = value; }
		}

		private uint _CanLocked;
		public uint CanLocked
		{
			get { return _CanLocked; }
			set { _CanLocked = value; }
		}

		private uint _CanBound;
		public uint CanBound
		{
			get { return _CanBound; }
			set { _CanBound = value; }
		}

		private uint _IsExclusive;
		public uint IsExclusive
		{
			get { return _IsExclusive; }
			set { _IsExclusive = value; }
		}

		private uint _IsExpendable;
		public uint IsExpendable
		{
			get { return _IsExpendable; }
			set { _IsExpendable = value; }
		}

		private uint _ColdDownType;
		public uint ColdDownType
		{
			get { return _ColdDownType; }
			set { _ColdDownType = value; }
		}

		private uint _ColdDownTime;
		public uint ColdDownTime
		{
			get { return _ColdDownTime; }
			set { _ColdDownTime = value; }
		}

		private uint _CanDrop;
		public uint CanDrop
		{
			get { return _CanDrop; }
			set { _CanDrop = value; }
		}

		private uint _DecomposePackID;
		public uint DecomposePackID
		{
			get { return _DecomposePackID; }
			set { _DecomposePackID = value; }
		}

		private uint _IsMerge;
		public uint IsMerge
		{
			get { return _IsMerge; }
			set { _IsMerge = value; }
		}

		private uint _vec_num;
		private string		[] _vec;
		public string		[] vec
		{
			get { return _vec; }
			set { _vec = value; }
		}

		public void Read(TReader reader)
		{

			reader.ReadStructBegin("item_table");
			{
				if(reader.ReadFieldBegin("ID"))
				{
					reader.Read(out this._ID);
				}
				reader.ReadFieldEnd("ID");
			}

			{
				if(reader.ReadFieldBegin("ItemName"))
				{
					reader.Read(out this._ItemName);
				}
				reader.ReadFieldEnd("ItemName");
			}

			{
				if(reader.ReadFieldBegin("Metempsychosis"))
				{
					reader.Read(out this._Metempsychosis);
				}
				reader.ReadFieldEnd("Metempsychosis");
			}

			{
				if(reader.ReadFieldBegin("UseTime"))
				{
					reader.Read(out this._UseTime);
				}
				reader.ReadFieldEnd("UseTime");
			}

			{
				if(reader.ReadFieldBegin("Bill"))
				{
					reader.Read(out this._Bill);
				}
				reader.ReadFieldEnd("Bill");
			}

			{
				if(reader.ReadFieldBegin("ReplaceItem"))
				{
					reader.Read(out this._ReplaceItem);
				}
				reader.ReadFieldEnd("ReplaceItem");
			}

			{
				if(reader.ReadFieldBegin("Medals"))
				{
					reader.Read(out this._Medals);
				}
				reader.ReadFieldEnd("Medals");
			}

			{
				if(reader.ReadFieldBegin("Value"))
				{
					reader.Read(out this._Value);
				}
				reader.ReadFieldEnd("Value");
			}

			{
				if(reader.ReadFieldBegin("ReserveMoneyFlag"))
				{
					reader.Read(out this._ReserveMoneyFlag);
				}
				reader.ReadFieldEnd("ReserveMoneyFlag");
			}

			{
				if(reader.ReadFieldBegin("Quality"))
				{
					reader.Read(out this._Quality);
				}
				reader.ReadFieldEnd("Quality");
			}

			{
				if(reader.ReadFieldBegin("ItemType"))
				{
						int e;
						reader.Read(out e);
						this._ItemType = (item_type)e;
				}
				else
				{
					string es;
					reader.Read(out es);
					this._ItemType = (item_type)Enum.Parse(typeof(item_type), es);
				}
				reader.ReadFieldEnd("ItemType");
			}

			{
				if(reader.ReadFieldBegin("UseSingTime"))
				{
					reader.Read(out this._UseSingTime);
				}
				reader.ReadFieldEnd("UseSingTime");
			}

			{
				if(reader.ReadFieldBegin("UserTarget"))
				{
					reader.Read(out this._UserTarget);
				}
				reader.ReadFieldEnd("UserTarget");
			}

			{
				if(reader.ReadFieldBegin("CanMoved"))
				{
					reader.Read(out this._CanMoved);
				}
				reader.ReadFieldEnd("CanMoved");
			}

			{
				if(reader.ReadFieldBegin("CanDeleted"))
				{
					reader.Read(out this._CanDeleted);
				}
				reader.ReadFieldEnd("CanDeleted");
			}

			{
				if(reader.ReadFieldBegin("CanTrade"))
				{
					reader.Read(out this._CanTrade);
				}
				reader.ReadFieldEnd("CanTrade");
			}

			{
				if(reader.ReadFieldBegin("CanSold"))
				{
					reader.Read(out this._CanSold);
				}
				reader.ReadFieldEnd("CanSold");
			}

			{
				if(reader.ReadFieldBegin("CanStored"))
				{
					reader.Read(out this._CanStored);
				}
				reader.ReadFieldEnd("CanStored");
			}

			{
				if(reader.ReadFieldBegin("CanLocked"))
				{
					reader.Read(out this._CanLocked);
				}
				reader.ReadFieldEnd("CanLocked");
			}

			{
				if(reader.ReadFieldBegin("CanBound"))
				{
					reader.Read(out this._CanBound);
				}
				reader.ReadFieldEnd("CanBound");
			}

			{
				if(reader.ReadFieldBegin("IsExclusive"))
				{
					reader.Read(out this._IsExclusive);
				}
				reader.ReadFieldEnd("IsExclusive");
			}

			{
				if(reader.ReadFieldBegin("IsExpendable"))
				{
					reader.Read(out this._IsExpendable);
				}
				reader.ReadFieldEnd("IsExpendable");
			}

			{
				if(reader.ReadFieldBegin("ColdDownType"))
				{
					reader.Read(out this._ColdDownType);
				}
				reader.ReadFieldEnd("ColdDownType");
			}

			{
				if(reader.ReadFieldBegin("ColdDownTime"))
				{
					reader.Read(out this._ColdDownTime);
				}
				reader.ReadFieldEnd("ColdDownTime");
			}

			{
				if(reader.ReadFieldBegin("CanDrop"))
				{
					reader.Read(out this._CanDrop);
				}
				reader.ReadFieldEnd("CanDrop");
			}

			{
				if(reader.ReadFieldBegin("DecomposePackID"))
				{
					reader.Read(out this._DecomposePackID);
				}
				reader.ReadFieldEnd("DecomposePackID");
			}

			{
				if(reader.ReadFieldBegin("IsMerge"))
				{
					reader.Read(out this._IsMerge);
				}
				reader.ReadFieldEnd("IsMerge");
			}

			{
				reader.ReadVectorBegin();

				if (reader.ReadFieldBegin("vec_num"))
				{
					reader.Read(out this._vec_num);
					this._vec = new string[this._vec_num];
				}
				reader.ReadFieldEnd("vec_num");

				for(uint i = 0; i < Constants.ITEM_VEC_NUM; ++i)
				{
					if(i == this._vec_num) break;

					if(reader.ReadVectorElementBegin("vec", i))
					{
						reader.Read(out this._vec[i]);
					}
					reader.ReadVectorElementEnd("vec", i);
				}
				reader.ReadVectorEnd();
			}


			reader.ReadStructEnd("item_table");
		}

		public void Write(TWriter writer)
		{
		
			writer.WriteStructBegin("item_table");
			{
				if(writer.WriteFieldBegin("ID"))
				{
					writer.Write(this._ID);
				}
				writer.WriteFieldEnd("ID");
			}

			{
				if(writer.WriteFieldBegin("ItemName"))
				{
					writer.Write(this._ItemName);
				}
				writer.WriteFieldEnd("ItemName");
			}

			{
				if(writer.WriteFieldBegin("Metempsychosis"))
				{
					writer.Write(this._Metempsychosis);
				}
				writer.WriteFieldEnd("Metempsychosis");
			}

			{
				if(writer.WriteFieldBegin("UseTime"))
				{
					writer.Write(this._UseTime);
				}
				writer.WriteFieldEnd("UseTime");
			}

			{
				if(writer.WriteFieldBegin("Bill"))
				{
					writer.Write(this._Bill);
				}
				writer.WriteFieldEnd("Bill");
			}

			{
				if(writer.WriteFieldBegin("ReplaceItem"))
				{
					writer.Write(this._ReplaceItem);
				}
				writer.WriteFieldEnd("ReplaceItem");
			}

			{
				if(writer.WriteFieldBegin("Medals"))
				{
					writer.Write(this._Medals);
				}
				writer.WriteFieldEnd("Medals");
			}

			{
				if(writer.WriteFieldBegin("Value"))
				{
					writer.Write(this._Value);
				}
				writer.WriteFieldEnd("Value");
			}

			{
				if(writer.WriteFieldBegin("ReserveMoneyFlag"))
				{
					writer.Write(this._ReserveMoneyFlag);
				}
				writer.WriteFieldEnd("ReserveMoneyFlag");
			}

			{
				if(writer.WriteFieldBegin("Quality"))
				{
					writer.Write(this._Quality);
				}
				writer.WriteFieldEnd("Quality");
			}

			{
				if(writer.WriteFieldBegin("ItemType"))
				{
					writer.Write((int)this._ItemType);
				}
				else
				{
					writer.Write(this._ItemType.ToString());
				}
				writer.WriteFieldEnd("ItemType");
			}

			{
				if(writer.WriteFieldBegin("UseSingTime"))
				{
					writer.Write(this._UseSingTime);
				}
				writer.WriteFieldEnd("UseSingTime");
			}

			{
				if(writer.WriteFieldBegin("UserTarget"))
				{
					writer.Write(this._UserTarget);
				}
				writer.WriteFieldEnd("UserTarget");
			}

			{
				if(writer.WriteFieldBegin("CanMoved"))
				{
					writer.Write(this._CanMoved);
				}
				writer.WriteFieldEnd("CanMoved");
			}

			{
				if(writer.WriteFieldBegin("CanDeleted"))
				{
					writer.Write(this._CanDeleted);
				}
				writer.WriteFieldEnd("CanDeleted");
			}

			{
				if(writer.WriteFieldBegin("CanTrade"))
				{
					writer.Write(this._CanTrade);
				}
				writer.WriteFieldEnd("CanTrade");
			}

			{
				if(writer.WriteFieldBegin("CanSold"))
				{
					writer.Write(this._CanSold);
				}
				writer.WriteFieldEnd("CanSold");
			}

			{
				if(writer.WriteFieldBegin("CanStored"))
				{
					writer.Write(this._CanStored);
				}
				writer.WriteFieldEnd("CanStored");
			}

			{
				if(writer.WriteFieldBegin("CanLocked"))
				{
					writer.Write(this._CanLocked);
				}
				writer.WriteFieldEnd("CanLocked");
			}

			{
				if(writer.WriteFieldBegin("CanBound"))
				{
					writer.Write(this._CanBound);
				}
				writer.WriteFieldEnd("CanBound");
			}

			{
				if(writer.WriteFieldBegin("IsExclusive"))
				{
					writer.Write(this._IsExclusive);
				}
				writer.WriteFieldEnd("IsExclusive");
			}

			{
				if(writer.WriteFieldBegin("IsExpendable"))
				{
					writer.Write(this._IsExpendable);
				}
				writer.WriteFieldEnd("IsExpendable");
			}

			{
				if(writer.WriteFieldBegin("ColdDownType"))
				{
					writer.Write(this._ColdDownType);
				}
				writer.WriteFieldEnd("ColdDownType");
			}

			{
				if(writer.WriteFieldBegin("ColdDownTime"))
				{
					writer.Write(this._ColdDownTime);
				}
				writer.WriteFieldEnd("ColdDownTime");
			}

			{
				if(writer.WriteFieldBegin("CanDrop"))
				{
					writer.Write(this._CanDrop);
				}
				writer.WriteFieldEnd("CanDrop");
			}

			{
				if(writer.WriteFieldBegin("DecomposePackID"))
				{
					writer.Write(this._DecomposePackID);
				}
				writer.WriteFieldEnd("DecomposePackID");
			}

			{
				if(writer.WriteFieldBegin("IsMerge"))
				{
					writer.Write(this._IsMerge);
				}
				writer.WriteFieldEnd("IsMerge");
			}

			{
				writer.WriteVectorBegin();

				if (writer.WriteFieldBegin("vec_num"))
				{
					this._vec_num = (uint)this._vec.Length;
					writer.Write(this._vec_num);
				}
				writer.WriteFieldEnd("vec_num");

				for(uint i = 0; i < Constants.ITEM_VEC_NUM; ++i)
				{
					if(i == this._vec_num) break;

					if(writer.WriteVectorElementBegin("vec", i))
					{
						writer.Write(this._vec[i]);
					}
					writer.WriteVectorElementEnd("vec", i);
				}
				writer.WriteVectorEnd();
			}


			writer.WriteStructEnd("item_table");
		}
	}

}

